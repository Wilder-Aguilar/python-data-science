# -*- coding: utf-8 -*-
"""Precios de ordenadores portátiles.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TlbZ3r4JMhEA3jHwSeKLrGwkYOXnJBJJ

# **Precios de ordenadores portátiles**

# **1. Importación de conjuntos de datos**

# Configuración

Para este laboratorio, utilizaremos las siguientes bibliotecas:

* `skillsnetwork` para descargar el conjunto de datos

*   [`pandas`](https://pandas.pydata.org/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMML0187ENSkillsNetwork31430127-2021-01-01) para gestionar los datos.
*   [`numpy`](https://numpy.org/?utm_medium=Exinfluencer&utm_source=Exinfluencer&utm_content=000026UJ&utm_term=10006555&utm_id=NA-SkillsNetwork-Channel-SkillsNetworkCoursesIBMML0187ENSkillsNetwork31430127-2021-01-01) para operaciones matemáticas.

### Importación de bibliotecas necesarias
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline

"""<h3> Carga del conjunto de datos en un marco de datos pandas denominado «df»</h3>"""

filepath = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DA0101EN-Coursera/laptop_pricing_dataset_base.csv"
df = pd.read_csv(filepath, header=None)

"""
<h3>Imprimir las primeras 5 entradas del conjunto de datos para confirmar la carga.</h3>
"""

df.head(5)

"""<h3>Añadir encabezados al marco de datos</h3>
Los encabezados del conjunto de datos, en orden, son "Manufacturer", "Category", "Screen", "GPU", "OS", "CPU_core",
"Screen_Size_inch", "CPU_frequency", "RAM_GB", "Storage_GB_SSD", "Weight_kg" and "Price".

Confirme la inserción imprimiendo las primeras 10 filas del conjunto de datos.
"""

headers = ["Manufacturer", "Category", "Screen", "GPU", "OS", "CPU_core",
"Screen_Size_inch", "CPU_frequency", "RAM_GB", "Storage_GB_SSD", "Weight_kg", "Price"]
df.columns = headers
df.head(10)

"""<h3>Reemplazar '?' por 'NaN'</h3>
Reemplazar las entradas '?' del conjunto de datos por el valor NaN, obtenido del paquete Numpy.
"""

df.replace('?',np.nan, inplace = True)
df.head(5)

"""<h3>Imprimir los tipos de datos de las columnas del marco de datos</h3>
Anote los tipos de datos de las diferentes columnas del conjunto de datos.
"""

print(df.dtypes)

"""<h3>Imprimir la descripción estadística del conjunto de datos, incluyendo la de los tipos de datos «objeto».</h3>"""

print(df.describe(include = "all"))

"""<h3>Imprimir la información resumida del conjunto de datos.</h3>"""

print(df.info())

df.head()

"""Tenga en cuenta que podemos actualizar la columna Screen_Size_cm de modo que todos los valores se redondeen al número más cercano con dos decimales utilizando numpy.round()."""

df[['Screen_Size_inch']] = np.round(df[['Screen_Size_inch']],2)
df.head()

"""### Evaluar el conjunto de datos en busca de datos faltantes
Los datos faltantes se convirtieron por última vez de «?» a numpy.NaN. Pandas utiliza los valores NaN y Null de forma intercambiable. Esto significa que solo hay que identificar las entradas que tienen valores Null. Escriba un código que identifique qué columnas tienen datos faltantes.
"""

missing_data = df.isnull()
print(missing_data.head())
for column in missing_data.columns.values.tolist():
    print(column)
    print (missing_data[column].value_counts())
    print("")

"""### Reemplazar con la media
Los valores que faltan en los atributos que contienen datos continuos se reemplazan mejor utilizando el valor medio. Observamos que los valores del atributo «Weight_kg» son de naturaleza continua y que faltan algunos valores. Por lo tanto, escriba un código para reemplazar los valores que faltan del peso con el valor medio del atributo.
"""

# sustituir los datos que faltan por la media
avg_weight=df['Weight_kg'].astype('float').mean(axis=0)
df["Weight_kg"] = df["Weight_kg"].replace(np.nan, avg_weight)
df.head()

# La función astype() convierte los valores al tipo de datos deseado.
# axis=0 indica que el valor medio se calcula a partir de todos los elementos de la columna en una fila.

"""### Reemplazar por el valor más frecuente
Los valores que faltan en los atributos que contienen datos categóricos se reemplazan mejor utilizando el valor más frecuente. Observamos que los valores del atributo «Screen_Size_cm» son de naturaleza categórica y que faltan algunos valores. Por lo tanto, escriba un código para reemplazar los valores que faltan en Screen Size por el valor más frecuente del atributo.
"""

# replacing missing data with mode
common_screen_size = df['Screen_Size_inch'].value_counts().idxmax()
df["Screen_Size_inch"] = df["Screen_Size_inch"].replace(np.nan, common_screen_size)

"""### Corregir los tipos de datos
Tanto «Weight_kg» como «Screen_Size_cm» tienen el tipo de datos «Object», cuando ambos deberían tener el tipo de datos «float». Escribe un código para corregir el tipo de datos de estas dos columnas.
"""

print(df.info())

df[["Weight_kg","Screen_Size_inch"]] = df[["Weight_kg","Screen_Size_inch"]].astype("float")

print(df.info())

"""### Estandarización de datos
El valor de Weight suele tener una unidad estándar de libras. Utilice la unidad de conversión que se indica a continuación y escriba un código para modificar las columnas del marco de datos en consecuencia. Actualice también sus nombres.

```{math}
1 kg   = 2,205 libras
```
"""

# Data standardization: convert weight from kg to pounds
df["Weight_kg"] = df["Weight_kg"]*2.205
df.rename(columns={'Weight_kg':'Weight_pounds'}, inplace=True)

"""### Normalización de datos
A menudo es necesario normalizar un atributo de datos continuo. Escriba un código para normalizar el atributo «CPU_frequency» con respecto al valor máximo disponible en el conjunto de datos.
"""

df['CPU_frequency'] = df['CPU_frequency']/df['CPU_frequency'].max()

"""### Binning
El binning es un proceso de creación de un atributo categórico que divide los valores de unos datos continuos en un número determinado de grupos. En este caso, escriba un código para crear tres grupos para el atributo «Price». Estos grupos se denominarán «Low», «Medium» y «High». El nuevo atributo se denominará «Price-binned».
"""

bins = np.linspace(min(df["Price"]), max(df["Price"]), 4)
group_names = ['Low', 'Medium', 'High']
df['Price-binned'] = pd.cut(df['Price'], bins, labels=group_names, include_lowest=True )

df.head()

"""Además, traza el gráfico de barras de estos intervalos."""

plt.bar(group_names, df["Price-binned"].value_counts())
plt.xlabel("Price")
plt.ylabel("count")
plt.title("Price bins")

"""### Variables indicadoras
Convierta el atributo «Screen» del conjunto de datos en dos variables indicadoras, «Screen-IPS_panel» y «Screen-Full_HD». A continuación, elimine el atributo «Screen» del conjunto de datos.
"""

#Indicator Variable: Screen
dummy_variable_1 = pd.get_dummies(df["Screen"])
dummy_variable_1.rename(columns={'IPS Panel':'Screen-IPS_panel', 'Full HD':'Screen-Full_HD'}, inplace=True)
df = pd.concat([df, dummy_variable_1], axis=1)

# drop original column "Screen" from "df"
df.drop("Screen", axis = 1, inplace=True)

"""Imprima el contenido de dataframe.head() para verificar los cambios que se realizaron en el conjunto de datos."""

print(df.head())