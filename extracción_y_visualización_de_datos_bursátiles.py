# -*- coding: utf-8 -*-
"""Extracción y visualización de datos bursátiles.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TjriUGOytR2D31NxjLzyf-s2asZxstBK

<h1>Extracción y visualización de datos bursátiles</h1>
<h2>Descripción</h2>

Extraer datos esenciales de un conjunto de datos y mostrarlos es una parte necesaria de la ciencia de datos; de este modo, las personas pueden tomar decisiones correctas basadas en los datos. En esta tarea, extraerás algunos datos bursátiles y, a continuación, los mostrarás en un gráfico.
"""

!pip install yfinance
!pip install bs4
!pip install nbformat
!pip install --upgrade plotly

import yfinance as yf
import pandas as pd
import requests
from bs4 import BeautifulSoup
import plotly.graph_objects as go
from plotly.subplots import make_subplots

import plotly.io as pio
pio.renderers.default = "iframe"

"""En Python, puedes ignorar las advertencias utilizando el módulo warnings. Puedes utilizar la función filterwarnings para filtrar o ignorar mensajes de advertencia específicos o categorías."""

import warnings
# Ignore all warnings
warnings.filterwarnings("ignore", category=FutureWarning)

"""## Definir función gráfica

En esta sección, definimos la función `make_graph`. **No es necesario que sepas cómo funciona la función, solo debes preocuparte por las entradas. Requiere un marco de datos con datos bursátiles (el marco de datos debe contener las columnas Fecha y Cierre), un marco de datos con datos de ingresos (el marco de datos debe contener las columnas Fecha e Ingresos) y el nombre de la acción.**
"""

def make_graph(stock_data, revenue_data, stock):
    fig = make_subplots(rows=2, cols=1, shared_xaxes=True, subplot_titles=("Historical Share Price", "Historical Revenue"), vertical_spacing = .3)
    stock_data_specific = stock_data[stock_data.Date <= '2021-06-14']
    revenue_data_specific = revenue_data[revenue_data.Date <= '2021-04-30']
    fig.add_trace(go.Scatter(x=pd.to_datetime(stock_data_specific.Date, infer_datetime_format=True), y=stock_data_specific.Close.astype("float"), name="Share Price"), row=1, col=1)
    fig.add_trace(go.Scatter(x=pd.to_datetime(revenue_data_specific.Date, infer_datetime_format=True), y=revenue_data_specific.Revenue.astype("float"), name="Revenue"), row=2, col=1)
    fig.update_xaxes(title_text="Date", row=1, col=1)
    fig.update_xaxes(title_text="Date", row=2, col=1)
    fig.update_yaxes(title_text="Price ($US)", row=1, col=1)
    fig.update_yaxes(title_text="Revenue ($US Millions)", row=2, col=1)
    fig.update_layout(showlegend=False,
    height=900,
    title=stock,
    xaxis_rangeslider_visible=True)
    fig.show()
    from IPython.display import display, HTML
    fig_html = fig.to_html()
    display(HTML(fig_html))

"""Utiliza la función make_graph que ya hemos definido. Tendrás que invocarla en las preguntas 5 y 6 para mostrar los gráficos y crear el panel de control.
> **Nota: No es necesario redefinir la función para trazar gráficos en ninguna otra parte de este cuaderno; basta con utilizar la función existente.**

## Pregunta 1: Utilizar yfinance para extraer datos bursátiles

Utilizando la función `Ticker`, introduzca el símbolo bursátil de la acción sobre la que queremos extraer datos para crear un objeto ticker. La acción es Tesla y su símbolo bursátil es `TSLA`.
"""

tesla = yf.Ticker("TSLA")

"""Utilizando el objeto ticker y la función history, extraiga la información bursátil y guárdela en un marco de datos denominado tesla_data. Establezca el parámetro period en «max» para obtener información sobre el periodo de tiempo máximo."""

tesla_data = tesla.history(period="max")

tesla_data.head()

"""**Restablezca el índice** utilizando la función `reset_index(inplace=True)` en el DataFrame tesla_data y muestre las primeras cinco filas del DataFrame `tesla_data` utilizando la función `head`. Haga una captura de pantalla de los resultados y del código desde el principio de la pregunta 1 hasta los resultados que se muestran a continuación."""

tesla_data.reset_index(inplace=True)
tesla_data.head()

"""## Pregunta 2: Utilizar el web scraping para extraer datos sobre los ingresos de Tesla.

Utiliza la biblioteca `requests` para descargar la página web https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm. Guarda el texto de la respuesta como una variable llamada `html_data`.
"""

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/revenue.htm"
html_data = requests.get(url).text
print(html_data)

"""Analiza los datos HTML utilizando `beautiful_soup` con un analizador, por ejemplo, `html5lib` o `html.parser`."""

soup = BeautifulSoup(html_data, "html.parser")

"""Utilizando `BeautifulSoup` o la función `read_html`, extraiga la tabla con `Tesla Revenue` y guárdela en un marco de datos denominado `tesla_revenue`. El marco de datos debe tener las columnas `Date` y `Revenue`.

<details><summary>Instrucciones paso a paso</summary>

```

Estas son las instrucciones paso a paso:

1. Crear un DataFrame vacío.
2. Buscar la tabla relevante.
3. Buscar la tabla de ingresos trimestrales de Tesla.
4. Iterar a través de las filas del cuerpo de la tabla.
5. Extraer datos de las columnas.
6. Añadir datos al DataFrame.

```
</details>

<details><summary>Haga clic aquí si necesita ayuda para localizar la tabla</summary>

```
    
A continuación se muestra el código para aislar la tabla. Ahora deberá recorrer las filas y columnas como en el laboratorio anterior.
    
soup.find_all(«tbody»)[1]
    
Si desea utilizar la función read_html, la tabla se encuentra en el índice 1.

En este laboratorio nos centramos en los ingresos trimestrales.
```

</details>
"""

tesla_revenue = pd.read_html(url)[1]
tesla_revenue.columns = ['Date', 'Revenue']
tesla_revenue.head()

"""Ejecute la siguiente línea para eliminar la coma y el signo de dólar de la columna «Revenue»."""

tesla_revenue["Revenue"] = tesla_revenue['Revenue'].str.replace(',|\$',"",regex=True)

"""Ejecute las siguientes líneas para eliminar cadenas nulas o vacías en la columna Ingresos."""

tesla_revenue.dropna(inplace=True)

tesla_revenue = tesla_revenue[tesla_revenue['Revenue'] != ""]

"""Muestra las últimas 5 filas del marco de datos `tesla_revenue` utilizando la función `tail`. Haz una captura de pantalla de los resultados."""

tesla_revenue.tail()

"""## Pregunta 3: Utilizar yfinance para extraer datos bursátiles

Utilizando la función `Ticker`, introduzca el símbolo bursátil de la acción sobre la que queremos extraer datos para crear un objeto ticker. La acción es GameStop y su símbolo bursátil es `GME`.
"""

GameStop = yf.Ticker("GME")

"""Utilizando el objeto ticker y la función `history`, extraiga la información bursátil y guárdela en un marco de datos denominado `gme_data`. Establezca el parámetro `period` en ` «max» ` para obtener información sobre el periodo de tiempo máximo."""

gme_data = GameStop.history(period="max")
gme_data.head()

"""**Restablezca el índice** utilizando la función `reset_index(inplace=True)` en el DataFrame gme_data y muestre las primeras cinco filas del DataFrame `gme_data` utilizando la función `head`. Haga una captura de pantalla de los resultados y del código desde el principio de la pregunta 3 hasta los resultados que se muestran a continuación."""

gme_data.reset_index(inplace=True)
gme_data.head()

"""## Pregunta 4: Utilizar el web scraping para extraer datos sobre los ingresos de GME.

Utiliza la biblioteca `requests` para descargar la página web https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html. Guarda el texto de la respuesta como una variable llamada `html_data_2`.
"""

url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/labs/project/stock.html"
data = requests.get(url).text
print(data)

"""Analiza los datos HTML utilizando `beautiful_soup` con un analizador, por ejemplo, `html5lib` o `html.parser`."""

soup = BeautifulSoup(data, "html.parser")

"""Utilizando `BeautifulSoup` o la función `read_html`, extraiga la tabla con `GameStop Revenue` y guárdela en un marco de datos denominado `gme_revenue`. El marco de datos debe tener las columnas `Date` y `Revenue`. Asegúrese de eliminar la coma y el signo del dólar de la columna `Revenue`.

> **Nota: Utiliza un método similar al que has utilizado en la pregunta 2.**

<details><summary>Haga clic aquí si necesita ayuda para localizar la tabla</summary>

```
    
A continuación se muestra el código para aislar la tabla. Ahora deberá recorrer las filas y columnas como en el laboratorio anterior.
    
soup.find_all(«tbody»)[1]
    
Si desea utilizar la función read_html, la tabla se encuentra en el índice 1.
"""

gme_revenue = pd.read_html(url)[1]
gme_revenue.columns = ['Date', 'Revenue']
gme_revenue["Revenue"] = gme_revenue['Revenue'].str.replace(',|\$',"",regex=True)
gme_revenue

"""Muestra las últimas cinco filas del marco de datos `gme_revenue` utilizando la función `tail`. Haz una captura de pantalla de los resultados."""

gme_revenue.tail()

"""## Pregunta 5: Traza el gráfico de las acciones de Tesla.

Utiliza la función `make_graph` para representar gráficamente los datos bursátiles de Tesla y proporciona un título para el gráfico. Ten en cuenta que el gráfico solo mostrará datos hasta junio de 2021.

<details><summary>Sugerencia</summary>

```

Solo tienes que invocar la función make_graph con el parámetro necesario para imprimir los gráficos. La estructura para llamar a la función `make_graph` es `make_graph(tesla_data, tesla_revenue, “Tesla”)`.

```
    
</details>
"""

make_graph(tesla_data, tesla_revenue, "Tesla")

"""## Pregunta 6: Traza el gráfico de las acciones de GameStop

Utiliza la función make_graph para representar gráficamente los datos bursátiles de GameStop y proporciona un título para el gráfico. La estructura para llamar a la función make_graph es make_graph(gme_data, gme_revenue, “GameStop”). Ten en cuenta que el gráfico solo mostrará datos hasta junio de 2021.

<details><summary>Sugerencia</summary>

```

Solo tienes que invocar la función make_graph con el parámetro requerido para imprimir los gráficos. La estructura para llamar a la función `make_graph` es `make_graph(gme_data, gme_revenue, “GameStop”)`

```
    
</details>
"""

make_graph(gme_data, gme_revenue, 'GameStop')

"""<h2>Acerca de los autores:</h2>

<a href="https://www.linkedin.com/in/joseph-s-50398b136/">Joseph Santarcangelo</a> tiene un doctorado en Ingeniería Eléctrica y su investigación se centró en el uso del aprendizaje automático, el procesamiento de señales y la visión artificial para determinar cómo los vídeos afectan a la cognición humana. Joseph trabaja para IBM desde que completó su doctorado.

Azim Hirjani
"""