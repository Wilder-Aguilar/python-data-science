# -*- coding: utf-8 -*-
"""Extracción de datos bursatiles.py.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/119KwjeNlZ9d-2KC2Ysl8eUkNpb3amiG1

<h1>Extracción de datos bursátiles utilizando una biblioteca de Python</h1>

Las acciones de una empresa son una parte de la empresa, más concretamente:
<p><b>Una acción (también conocida como capital social) es un título que representa la propiedad de una fracción de una sociedad anónima. Esto da derecho al propietario de la acción a una proporción de los activos y beneficios de la sociedad anónima equivalente a la cantidad de acciones que posee. Las unidades de acciones se denominan «acciones». [1]</p></b>
Un inversor puede comprar una acción y venderla más tarde. Si el precio de la acción sube, el inversor obtiene beneficios; si baja, el inversor sufre pérdidas.  Determinar el precio de una acción es complejo, ya que depende del número de acciones en circulación, del volumen de beneficios futuros de la empresa y de muchos otros factores. La gente negocia con acciones a lo largo del día. El teletipo bursátil es un informe sobre el precio de una determinada acción, que se actualiza continuamente durante la sesión bursátil por las distintas bolsas de valores.
<p>Eres un científico de datos que trabaja para un fondo de cobertura; tu trabajo consiste en detectar cualquier actividad bursátil sospechosa. En este laboratorio extraerás datos bursátiles utilizando una biblioteca de Python. Utilizaremos la biblioteca <coode>yfinance</code>, que nos permite extraer datos bursátiles y devolverlos en un marco de datos pandas. Utilizarás el laboratorio para extraerlos.</p>
"""

!pip install yfinance
!pip install matplotlib
# !pip install pandas==1.3.3

import yfinance as yf
import pandas as pd

"""## Uso de la biblioteca yfinance para extraer datos bursátiles

Utilizando el módulo `Ticker` podemos crear un objeto que nos permitirá acceder a funciones para extraer datos. Para ello, debemos proporcionar el símbolo bursátil de la acción. En este caso, la empresa es Apple y el símbolo bursátil es `AAPL`.
"""

apple = yf.Ticker("AAPL")

"""Ahora podemos acceder a funciones y variables para extraer el tipo de datos que necesitamos. Puedes verlos y lo que representan aquí https://aroussi.com/post/python-yahoo-finance."""

!wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/data/apple.json

"""### Información sobre acciones

Utilizando la información del atributo, podemos extraer información sobre las acciones como un diccionario de Python.
"""

import json
with open('apple.json') as json_file:
    apple_info = json.load(json_file)
    # Print the type of data variable
    #print("Type:", type(apple_info))
apple_info

"""### Extracción del precio de las acciones

Una acción es la parte más pequeña de las acciones de una empresa que se puede comprar, y los precios de estas acciones fluctúan con el tiempo. Utilizando el método <code>history()</code> podemos obtener el precio de las acciones durante un determinado periodo de tiempo. Utilizando el parámetro `period` podemos establecer cuánto tiempo atrás desde el presente queremos obtener datos. Las opciones para `period` son 1 día (1d), 5d, 1 mes (1mo) , 3mo, 6mo, 1 año (1y), 2y, 5y, 10y, ytd y max.
"""

apple_share_price_data = apple.history(period="max")

"""El formato en el que se devuelven los datos es un DataFrame de Pandas. Con la `Fecha` como índice, se proporcionan los valores `Apertura`, `Máximo`, `Mínimo`, `Cierre`, `Volumen` y `Divisiones de acciones` para cada día."""

apple_share_price_data.head()

"""Podemos restablecer el índice del DataFrame con la función reset_index. También establecemos el parámetro inplace en True para que el cambio se aplique al propio DataFrame."""

apple_share_price_data.reset_index(inplace=True)

"""Podemos trazar el precio de apertura frente a la fecha:"""

apple_share_price_data.plot(x="Date", y="Open")

"""### Extracción de dividendos

Los dividendos son la distribución de los beneficios de una empresa entre los accionistas. En este caso, se definen como una cantidad de dinero devuelta por cada acción que posee un inversor. Utilizando los dividendos variables, podemos obtener un marco de datos con la información. El periodo de los datos viene dado por el periodo definido en la función «history».
"""

apple.dividends

"""Podemos trazar los dividendos a lo largo del tiempo:"""

apple.dividends.plot()

"""## Exercise

Ahora, utilizando el módulo `Ticker`, crea un objeto para AMD (Advanced Micro Devices) con el símbolo bursátil `AMD`; asigna al objeto el nombre <code>amd</code>.
"""

amd = yf.Ticker("AMD")

!wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0220EN-SkillsNetwork/data/amd.json

import json
with open('amd.json') as json_file:
    amd_info = json.load(json_file)
    # Print the type of data variable
    #print("Type:", type(apple_info))
amd_info

"""Pregunta 1: Utiliza la clave «país» para encontrar el país al que pertenece la acción. Recuérdalo, ya que será una pregunta del cuestionario."""

pais_de_amd = amd_info['country']

print(f"El país de la acción de AMD es: {pais_de_amd}")

"""Pregunta 2: Utiliza la clave «sector» para encontrar el sector al que pertenece la acción. Recuérdalo, ya que será una pregunta del cuestionario."""

sector_de_amd = amd_info['sector']

print(f"El sector de la acción de AMD es: {sector_de_amd}")

"""Pregunta 3 Obtenga los datos bursátiles de AMD utilizando la función de historial y establezca el período en el máximo. Busque el volumen negociado el primer día (primera fila)."""

amd_share_price_data = amd.history(period="max")

amd_share_price_data.head()